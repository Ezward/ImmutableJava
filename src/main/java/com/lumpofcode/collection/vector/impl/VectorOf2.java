package com.lumpofcode.collection.vector.impl;

import com.lumpofcode.collection.vector.Vector;

import com.lumpofcode.collection.vector.Vectors;

import com.lumpofcode.collection.vector.VectorTrie;

import com.lumpofcode.collection.vector.VectorIterator;

import java.util.Iterator;

import java.util.function.Function;


/*--- Generated by com.lumpofcode.collection.vector.VectorTemplate ---*/

public final class VectorOf2<T> implements Vector<T>, Iterable<T>
{
	private final T element0;
	private final T element1;

	public VectorOf2(T element0, T element1)
	{
		this.element0 = element0;
		this.element1 = element1;
	}

	public boolean isEmpty() { return false; }

	public int size() { return 2; }

	public T get(int index)
	{
		switch(index)
		{
			case 0: return element0;
			case 1: return element1;
		}

		throw new IndexOutOfBoundsException();
	}

	public Vector<T> set(int index, T value)
	{
		switch(index)
		{
			case 0: return new VectorOf2<>(value, element1);
			case 1: return new VectorOf2<>(element0, value);
			case 2: return push(value);
		}

		throw new IndexOutOfBoundsException();
	}

	public Vector<T> push(T value)
	{
		return new VectorOf3<>(element0, element1, value);
	}

	public Vector<T> push(T e0, T e1, T e2, T e3, T e4, T e5, T e6, T e7, T e8, T e9, T e10, T e11, T e12, T e13, T e14, T e15)
	{
		return new VectorTrie<T>(1, new VectorOf16(element0, element1, e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13), new VectorOf2(e14, e15));
	}

	public Vector<T> pushAll(final Iterable<T> iterable)
	{
		return Vectors.pushAll(this, iterable);
	}

	public <R> Vector<R> map(Function<? super T, ? extends R> mapper)
	{
		return new VectorOf2<>(mapper.apply(element0), mapper.apply(element1));
	}

	public <R> Vector<R> flatmap(Function<T, Vector<R>> mapper)
	{
		return Vectors.flatmap(this, mapper);
	}

	public String toString()
	{
		return "[" + element0.toString() + ", " + element1.toString() + "]";

	}

	public Iterator<T> iterator() { return new VectorIterator<T>(this); }
}

